{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","server","moment","locale","PromoRow","props","state","config","settings","env","url","this","promo","replace","fetch","then","response","json","setState","next","startDate","expiryDate","isSame","subtract","target","href","path","format","title","prod","promoID","style","bucket","partners","join","devices","colSpan","React","Component","App","promos","className","categories","promotions","map","v","index","key","find","f","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4416cfc8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport moment from 'moment';\nimport 'moment/locale/es';\n\nconst server = \"https://www.monopolycasino.es\"\nconst promoPageLink = \"/api/config/promotions/v2/promotions-page.json\";\nmoment().locale('es')\n\n\nclass PromoRow extends React.Component{\n  constructor(props) { \n    super(props); \n    this.state = { config:{settings:{env:{}}} }; \n    \n  } \n\n  componentDidMount() {\n    let url = server + this.props.promo.url.replace(\"index.html\",\"\");\n    fetch(url+\"config.json\").then(response=>response.json()).then(json => {this.setState({config: json})});\n  }\n\n\n  render(){\n    return (\n      <tbody>\n        <tr>\n          <td>\n            {this.props.next?\n              moment(this.props.next.startDate,\"DD/MM/YYYY\")< moment() && moment(this.props.next.expiryDate,\"DD/MM/YYYY\")> moment()?'üî•Ô∏è':\n                moment(this.props.next.startDate,\"DD/MM/YYYY\") < moment() && moment(this.props.next.expiryDate,\"DD/MM/YYYY\")< moment()?'üßü':\n                  moment(this.props.next.startDate,\"DD/MM/YYYY\") > moment() && moment(this.props.next.expiryDate,\"DD/MM/YYYY\")> moment()?'üîÆ':\n                  'üõë'\n              :''\n            }\n            {this.props.next?\n              moment(this.props.next.startDate,\"DD/MM/YYYY\").isSame(moment(this.props.promo.startDate,\"DD/MM/YYYY\").subtract(5,\"days\"),'date') && this.props.next.expiryDate==this.props.promo.startDate?'‚úî':\n                '‚úñÔ∏è'\n              :''}\n\n          </td>\n          <td>\n            <a target=\"_blank\" href={server+'/promotion/'+this.props.promo.path+\"?previewDate=\"+(moment(this.props.promo.startDate,\"DD/MM/YYYY\").format(\"DD-MM-YYYY\"))}>\n              {this.props.promo.title}\n            </a>\n          </td>\n          <td>{this.state.config.settings.env.prod?this.state.config.settings.env.prod.promoID :\"\"}</td>\n          <td>\n          {moment(this.props.promo.startDate,\"DD/MM/YYYY\")< moment() && moment(this.props.promo.expiryDate,\"DD/MM/YYYY\")> moment()?'üî•Ô∏è':\n              moment(this.props.promo.startDate,\"DD/MM/YYYY\") < moment() && moment(this.props.promo.expiryDate,\"DD/MM/YYYY\")< moment()?'üßü':\n                moment(this.props.promo.startDate,\"DD/MM/YYYY\") > moment() && moment(this.props.promo.expiryDate,\"DD/MM/YYYY\")> moment()?'üîÆ':\n                'üõë'\n          }\n          </td>\n          <td style={{'color':this.props.promo.startDate==this.state.config.settings.startDate?\"green\":\"red\"}} >{moment(this.props.promo.startDate,\"DD/MM/YYYY\").format(\"DD MMM YY\") }</td>\n          <td style={{'color':this.props.promo.expiryDate==this.state.config.settings.expiryDate?\"green\":\"red\"}} >{moment(this.props.promo.expiryDate,\"DD/MM/YYYY\").format(\"DD MMM YY\")}</td>\n          <td>{this.props.promo.bucket}</td>\n          <td>{this.props.promo.partners?this.props.promo.partners.join(','):''}</td>\n          <td>{this.props.promo.devices}</td>\n        </tr>\n        <tr style={{'display':'none'}}>\n          <td colSpan=\"10\">\n            hoola\n          </td>\n        </tr>\n      </tbody>\n    )\n  }\n}\n\n\n\nclass App extends React.Component { \n  \n  constructor(props) { \n      super(props); \n      this.state = { promos:{} }; \n  } \n\n  componentDidMount() {\n      fetch(server+promoPageLink).then(response=>response.json()).then(json => this.setState({promos: json}));\n  }\n\n  render() { \n        \n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>MCE Promotions</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Pr√≥ximamente</th>\n                <th>Title</th>\n                <th>ID</th>\n                <th></th>\n                <th>Start</th>\n                <th>End</th>\n                <th>Bucket</th>\n                <th>Partner</th>\n                <th>Devices</th>\n              </tr>\n            </thead>\n            {\n              (this.state.promos.categories)?\n              this.state.promos.categories[0].promotions.map(\n                (v, index)=>{\n                  return <PromoRow key={index}  promo={v} next={this.state.promos.categories[1].promotions.find(f=> f.path == v.path)} ></PromoRow>\n                } \n              ):null\n            }\n          </table>\n        </div>\n      </div>\n    );\n  } \n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}